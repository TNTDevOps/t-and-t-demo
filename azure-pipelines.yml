# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - none
pr:
  - none

pool:
  name: 'CentOSAgent-TnT-Demo-Pool'

# Test Staging
stages:
- stage: Create_Artifacts
  displayName: Create Artifacts
  pool:
    #vmImage: 'ubuntu-latest'
    name: 'CentOSAgent-TnT-Demo-Pool'
  jobs:
  - job: Create_Archive
    displayName: Create Archive
    steps:
    - checkout: self

    - task: ArchiveFiles@2
      displayName: Create Full Deployment Package
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber)-full.zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: Publish Archive File
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop-full'
        publishLocation: 'Container'

    - task: SSH@0
      displayName: Delete Zip
      inputs:
        sshEndpoint: 'tnt-demo-ssh'
        runOptions: 'inline'
        inline: 'rm -f $(Build.ArtifactStagingDirectory)/$(Build.BuildNumber)-full.zip'
        readyTimeout: '20000'

    - task: Bash@3
      displayName: Delete Static Files
      inputs:
        targetType: 'inline'
        script: |
          # Write your commands here
          find . -name "*.xml" -type f -print -delete
          find . -name "*.gif" -type f -print -delete
          find . -name "*.jpg" -type f -print -delete
          find . -name "*.png" -type f -print -delete
          find . -name "*.ttf" -type f -print -delete
          find . -name "*.otf" -type f -print -delete

    - task: ArchiveFiles@2
      displayName: Create Filtered Deployment Package
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber)-filtered.zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: Publish Archive File
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop-filtered'
        publishLocation: 'Container'

# Deploy to Staging
- stage: Deploy_Staging
  displayName: Deploy Staging
  jobs:
  - deployment: Deploy_Job
    displayName: Deploy Job
    environment: 'staging'
    strategy:
      runOnce:
        deploy:      
          steps:
          - checkout: self
          - checkout: git://t-and-t-demo/t-and-t-demo

          - task: SSH@0
            displayName: '1 Enable Maintenance'
            inputs:
              sshEndpoint: 'tnt-demo-ssh'
              runOptions: 'script'
              scriptPath: '$(Agent.BuildDirectory)/s/t-and-t-demo/deploy-scripts/1_enable_maintenance.sh'
              readyTimeout: '20000'
          - task: SSH@0
            displayName: '7 Check Page Status 200'
            inputs:
              sshEndpoint: 'tnt-demo-ssh'
              runOptions: 'script'
              scriptPath: '$(Agent.BuildDirectory)/s/t-and-t-demo/deploy-scripts/7_check_200.sh'
              args: 'https://www.tntnightmarket.biz'
              readyTimeout: '20000'

# Deploy to Production
- stage: Deploy_Production
  displayName: Deploy Production
  pool:
    name: 'CentOSAgent-TnT-Demo-Pool'
  jobs:
  - deployment: Deploy_Job
    displayName: Deploy Job
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - checkout: git://t-and-t-demo/t-and-t-demo

            - task: PythonScript@0
              displayName: Selenium Tests
              inputs:
                scriptSource: 'filePath'
                scriptPath: '$(Agent.BuildDirectory)/s/t-and-t-demo/selenium-test/test.py'

            - script: echo 'Production Deployment Completed!'
              displayName: 'Production Deployment'